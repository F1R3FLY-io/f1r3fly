new
  rl(`rho:registry:lookup`), RhoSpecCh,
  stdlog(`rho:io:stdlog`),
  test_get_before_set,
  test_get_after_set,
  test_get_after_update_nil,
  test_get_after_update,
  test_fast_unsafe_get_after_set,
  test_contains_before_set,
  test_contains_after_set,
  test_get_after_set_to_nil,
  test_contains_after_set_to_nil,
  test_contention
in {
  rl!(`rho:id:zphjgsfy13h1k85isc8rtwtgt3t9zzt5pjd5ihykfmyapfc4wt3x5h`, *RhoSpecCh) |
  for(@(_, RhoSpec) <- RhoSpecCh) {
    @RhoSpec!("testSuite",
      [
        ("Get before set returns Nil", *test_get_before_set),
        ("Get after set returns the new value", *test_get_after_set),
        ("Get after updating a nonexistent key should return Nil", *test_get_after_update_nil),
        ("Get after updating an existing key should return the right value", *test_get_after_update),
        ("Fast unsafe get after set returns the new value", *test_fast_unsafe_get_after_set),
        ("Contains before set returns false", *test_contains_before_set),
        ("Contains after set returns true", *test_contains_after_set),
        ("Get after set to Nil returns Nil", *test_get_after_set_to_nil),
        ("Contains after set to Nil returns true", *test_contains_after_set_to_nil),
        ("Works under contention", *test_contention)
      ])
  } |

  new TreeHashMapCh in {
    rl!(`rho:lang:treeHashMap`, *TreeHashMapCh) |
    for(TreeHashMap <- TreeHashMapCh) {
      contract test_get_before_set(rhoSpec, _, ackCh) = {
        new ret, ch in {
          TreeHashMap!("init", 3, *ret) |
          for (@thm <- ret) {
            TreeHashMap!("get", thm, "no such key", *ch) |
            rhoSpec!("assertMany",
              [
                ((Nil, "== <-", *ch), "Getting with an unused key returns Nil")
              ], *ackCh)
          }
        }
      } |

      contract test_get_after_update_nil(rhoSpec, _, ackCh) = {
        new thmCh, ack, ch, update in {
          TreeHashMap!("init", 3, *thmCh) |
          contract update(@val, ret) = {
            ret!(val + 1)
          } |
          for (@thm <- thmCh) {
            TreeHashMap!("update", thm, "no such key", *update, *ack) |
            for (_ <- ack) {
              TreeHashMap!("get", thm, "no such key", *ch) |
              rhoSpec!("assertMany",
                [
                  ((Nil, "== <-", *ch), "Getting after updating with an unused key returns Nil")
                ], *ackCh)
            }
          }
        }
      } |

      contract test_get_after_update(rhoSpec, _, ackCh) = {
        new thmCh, ack1, ack2, ch, update in {
          TreeHashMap!("init", 3, *thmCh) |
          contract update(@val, ret) = {
            ret!(val + 1)
          } |
          for (@thm <- thmCh) {
            TreeHashMap!("set", thm, "key", 0, *ack1) |
            for (_ <- ack1) {
              TreeHashMap!("update", thm, "key", *update, *ack2) |
              for (_ <- ack2) {
                TreeHashMap!("get", thm, "key", *ch) |
                rhoSpec!("assertMany",
                  [
                    ((1, "== <-", *ch), "Getting after updating after setting returns the right value")
                  ], *ackCh)
              }
            }
          }
        }
      } |

      contract test_get_after_set(rhoSpec, _, ackCh) = {
        new ret, ch1, ch2 in {
          TreeHashMap!("init", 3, *ret) |
          for (@thm <- ret) {
            TreeHashMap!("set", thm, "some key", "some val", *ch1) |
            for (_ <- ch1) {
              TreeHashMap!("get", thm, "some key", *ch1) |
              TreeHashMap!("get", thm, "some other key", *ch2) |
              rhoSpec!("assertMany",
                [
                  (("some val", "== <-", *ch1), "Getting with the proper key returns the correct value"),
                  ((Nil, "== <-", *ch2), "Getting with a different key returns Nil")
                ], *ackCh)
            }
          }
        }
      } |

      contract test_fast_unsafe_get_after_set(rhoSpec, _, ackCh) = {
        new ret, ch1, ch2 in {
          TreeHashMap!("init", 3, *ret) |
          for (@thm <- ret) {
            TreeHashMap!("set", thm, "some key", "some val", *ch1) |
            for (_ <- ch1) {
              TreeHashMap!("fastUnsafeGet", thm, "some key", *ch2) |
              rhoSpec!("assertMany",
                [
                  (("some val", "== <-", *ch2), "Getting with the proper key returns the correct value"),
                ], *ackCh)
            }
          }
        }
      } |

      contract test_contains_before_set(rhoSpec, _, ackCh) = {
        new ret, ch in {
          TreeHashMap!("init", 3, *ret) |
          for (@thm <- ret) {
            TreeHashMap!("contains", thm, "no such key", *ch) |
            rhoSpec!("assertMany",
              [
                ((false, "== <-", *ch), "Getting with an unused key returns false")
              ], *ackCh)
          }
        }
      } |

      contract test_contains_after_set(rhoSpec, _, ackCh) = {
        new ret, ch1, ch2, ch3 in {
          TreeHashMap!("init", 3, *ret) |
          for (@thm <- ret) {
            TreeHashMap!("set", thm, "some key", "some val", *ch1) |
            for (_ <- ch1) {
              TreeHashMap!("contains", thm, "some key", *ch2) |
              TreeHashMap!("contains", thm, "some other key", *ch3) |
              rhoSpec!("assertMany",
                [
                  ((true, "== <-", *ch2), "Getting with the proper key returns true"),
                  ((false, "== <-", *ch3), "Getting with a different key returns false")
                ], *ackCh)
            }
          }
        }
      } |

      contract test_get_after_set_to_nil(rhoSpec, _, ackCh) = {
        new ret, ch1, ch2 in {
          TreeHashMap!("init", 3, *ret) |
          for (@thm <- ret) {
            TreeHashMap!("set", thm, "some key", Nil, *ch1) |
            for (_ <- ch1) {
              TreeHashMap!("get", thm, "some key", *ch2) |
              rhoSpec!("assertMany",
                [
                  ((Nil, "== <-", *ch2), "Getting with the proper key returns the correct value"),
                ], *ackCh)
            }
          }
        }
      } |

      contract test_contains_after_set_to_nil(rhoSpec, _, ackCh) = {
        new ret, ch1, ch2, ch3 in {
          TreeHashMap!("init", 3, *ret) |
          for (@thm <- ret) {
            TreeHashMap!("set", thm, "some key", Nil, *ch1) |
            for (_ <- ch1) {
              TreeHashMap!("contains", thm, "some key", *ch2) |
              TreeHashMap!("contains", thm, "some other key", *ch3) |
              rhoSpec!("assertMany",
                [
                  ((true, "== <-", *ch2), "Getting with the proper key returns true"),
                  ((false, "== <-", *ch3), "Getting with a different key returns false")
                ], *ackCh)
            }
          }
        }
      } |

      contract test_contention(rhoSpec, _, ackCh) = {
        new tryIt in {
          contract tryIt(@n, @flag) = {
            new out(`rho:io:stdlog`), mapCh in {
              TreeHashMap!("init", 3, *mapCh) |
              for (@map <- mapCh) {
                new ret1, ret2, ret3 in {
                  TreeHashMap!("set", map, "category", "object", *ret1) |
                  TreeHashMap!("set", map, "category", "morphism", *ret2) |
                  for (_ <- ret1 & _ <- ret2) {
                    TreeHashMap!("get", map, "category", *ret3) |
                    for (@val3 <- ret3) {
                      out!("info", [n, val3]) |
                      if (n == 9) {
                        rhoSpec!("assertMany",
                        [
                          ((flag, "==", true), "Placeholder")
                        ], *ackCh)
                      } else {
                        tryIt!(n+1, flag and (val3 != Nil))
                      }
                    }
                  }
                }
              }
            }
          } |
          tryIt!(0, true)
        }
      }
    }
  }
}
