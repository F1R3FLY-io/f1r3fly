//scalapackage coop.rchain.rholang

new rl(`rho:registry:lookup`),
    RhoSpecCh,
    setupHistoryCh,
    setup, teardown,
    stdlog(`rho:io:stdlog`),
    testSetup, testAssertEquals, testAssertNotEquals, testAssertTrue, testAssertMany,
    testAssertEqualsFromChannel, testAssertManyEqualsFromChannel,
    testAssertEqualsForVariables,  testMultipleAttempts,
    testAssertNotEqualsFromChannel,
    testSetupTeardown
in {
  setupHistoryCh!({"setups":[], "teardowns":[]}) |

  rl!(`rho:id:zphjgsfy13h1k85isc8rtwtgt3t9zzt5pjd5ihykfmyapfc4wt3x5h`, *RhoSpecCh) |
  for(@(_, RhoSpec) <- RhoSpecCh) {
  @RhoSpec!("testSuite", *setup, *teardown,
    [
      ("setup runs correctly", *testSetup),
      ("assert equality", *testAssertEquals),
      ("assert non equality", *testAssertNotEquals),
      ("assert boolean conditions", *testAssertTrue),
      ("assert many conditions", *testAssertMany),
      ("assert '== <-'", *testAssertEqualsFromChannel),
      ("assert '!= <-'", *testAssertNotEqualsFromChannel),
      ("assertMany '== <-'", *testAssertManyEqualsFromChannel),
      ("run the test function multiple times", *testMultipleAttempts, 10),
      ("setup and teardown are called for each test", *testSetupTeardown),
    ])
  } |

  contract setup(@testName, returnCh) = {
    for (@setupHistory <- setupHistoryCh) {
      returnCh!("self value") |
      setupHistoryCh!(setupHistory.set("setups", setupHistory.get("setups") ++ [testName]))
    }
  } |

  contract teardown(@testName, self, ackCh) = {
    for (@setupHistory <- setupHistoryCh) {
      ackCh!(Nil) |
      setupHistoryCh!(setupHistory.set("teardowns", setupHistory.get("teardowns") ++ [testName]))
    }
  } |

  contract testSetup(rhoSpec, self, ackCh) = {
    rhoSpec ! ("assert",
      ("self value", "==", *self),
      "self should equal the value returned by testsuite setup",
      *ackCh)
  } |

  contract testAssertEquals(rhoSpec, self, ackCh) = {
    new privateAck in {
      rhoSpec ! ("assert", ("abc", "==", "abc"), "strings should be equal", *privateAck) |

      for( _ <- privateAck) {
        rhoSpec ! ("assert", (1, "==", 1), "ints should be equal", *ackCh)
      }
    }
  } |

  contract testAssertNotEquals(rhoSpec, self, ackCh) = {
    stdlog ! ("info", "testing nonequality") |
    new privateAck in {
      rhoSpec ! ("assert", ("abc", "!=", "xyz"), "strings should be not equal", *privateAck) |

      for( _ <- privateAck) {
        rhoSpec ! ("assert", (1, "!=", 0), "ints should not be equal", *ackCh)
      }
    }
  } |

  contract testAssertTrue(rhoSpec, self, ackCh) = {
    rhoSpec ! ("assert", true, "boolean assertions should work", *ackCh)
  } |

  contract testAssertMany(rhoSpec, self, ackCh) = {
    rhoSpec ! ("assertMany",
      [
        (true, "assert boolean"),
        ((1, "==", 1), "assert equals")
      ],
      *ackCh)
  } |

  contract testAssertEqualsFromChannel(rhoSpec, self, ackCh) = {
    new ch in {
      ch ! (1) |
      rhoSpec ! ("assert", (1, "== <-", *ch), "assert equals from channel", *ackCh)
    }
  } |

  contract testAssertNotEqualsFromChannel(rhoSpec, self, ackCh) = {
    stdlog ! ("info", "testing nonequality from channel") |
    new ch in {
      ch ! (1) |
      rhoSpec ! ("assert", (0, "!= <-", *ch), "assert not equals from channel", *ackCh)
    }
  } |

  contract testAssertEqualsForVariables(rhoSpec, self, ackCh) = {
    new ch1, ch2 in {
      ch1 ! (1) | ch2 ! (1) |
      for (x <- ch1 & y <- ch2) {
        rhoSpec ! ("assertMany",
          [
            ((*x, "==", *y), "assert var equals var"),
            ((*x, "==", 1), "assert var equals const"),
            ((1, "==", *x), "assert const equals var"),
          ],
          *ackCh)
      }
    }
  } |

  contract testAssertManyEqualsFromChannel(rhoSpec, self, ackCh) = {
    new ch1, ch2 in {
      ch1 ! (1) |
      ch2 ! (2) |
      rhoSpec ! ("assertMany",
        [
          ((1, "== <-", *ch1), "first assert"),
          ((2, "== <-", *ch2) , "second assert")
        ],
        *ackCh)
    }
  } |

  contract testMultipleAttempts(rhoSpec, self, ackCh) = {
    rhoSpec!("assert", true, "should always be successful", *ackCh)
  } |

  contract testSetupTeardown(rhoSpec, self, ackCh) = {
    for(@setupHistory <- setupHistoryCh) {
      setupHistoryCh!(setupHistory) |
      rhoSpec!("assertMany",
        [
          ((19, "==", setupHistory.get("setups").length()),
            "setups history should also include this test and also the one repeated 10 times (testMultipleAttempts)"),
          ((18, "==", setupHistory.get("teardowns").length()),
            "teardowns history should not include this test but includes the repeated ones")
        ],
        *ackCh)
    }
  }
}
