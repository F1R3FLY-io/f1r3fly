new
  rl(`rho:registry:lookup`), RhoSpecCh,
  stdlog(`rho:io:stdlog`),
  test_push_item,
  test_pop_item,
  test_pop_item_from_empty_collection,
  test_convert_to_list
in {
  rl!(`rho:id:zphjgsfy13h1k85isc8rtwtgt3t9zzt5pjd5ihykfmyapfc4wt3x5h`, *RhoSpecCh) |
  for(@(_, RhoSpec) <- RhoSpecCh) {
    @RhoSpec!("testSuite",
      [
        ("Push item", *test_push_item),
        ("Pop item", *test_pop_item),
        ("Pop item from empty collection", *test_pop_item_from_empty_collection),
        ("Convert to list", *test_convert_to_list),
      ])
  } |

  new StackCh in {
    rl!(`rho:lang:stack`, *StackCh) |
    for(Stack <- StackCh) {

      contract test_push_item(rhoSpec, _, ackCh) = {
        new stackCh, ch in {
          Stack!("init", *stackCh) |

          for(@stack <- stackCh) {
            Stack!("push", stack, "value", *ch) |

            rhoSpec!("assertMany",
              [
                ((1, "== <-", *ch), "Push returns updated size")
              ], *ackCh)
          }
        }
      } |

      contract test_pop_item(rhoSpec, _, ackCh) = {
        new stackCh, pushCh, ch in {
          Stack!("init", *stackCh) |

          for(@stack <- stackCh) {
            Stack!("push", stack, "value", *pushCh) |

            for(_ <- pushCh) {
              Stack!("pop", stack, *ch) |

              rhoSpec!("assertMany",
                [
                  (((true, "value"), "== <-", *ch), "Pop returns last inserted item")
                ], *ackCh)
            }
          }
        }
      } |

      contract test_pop_item_from_empty_collection(rhoSpec, _, ackCh) = {
        new stackCh, ch in {
          Stack!("init", *stackCh) |

          for(@stack <- stackCh) {
            Stack!("pop", stack, *ch) |

            rhoSpec!("assertMany",
              [
                (((false, "stack is empty"), "== <-", *ch), "Pop returns error if stack is empty")
              ], *ackCh)
          }
        }
      } |

      contract test_convert_to_list(rhoSpec, _, ackCh) = {
        new stackCh, ch in {
          Stack!("init", *stackCh) |

          for(@stack <- stackCh) {
            Stack!("push", stack, "value", *pushCh) |

            for(_ <- pushCh) {
              Stack!("toList", stack, *ch) |

              rhoSpec!("assertMany",
                [
                  ((["value"], "== <-", *ch), "Stack can be converted to list")
                ], *ackCh)
            }
          }
        }
      }
    }
  }
}
