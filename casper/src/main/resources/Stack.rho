/*
 The table below describes the required computations and their dependencies

 No. | Dependency | Computation method | Result
 ----+------------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------
 1.  |            | given              | sk = c94e647de6876c954ebb7b64c40a220227770f9be003635edfe3336a1a2c8605
 2.  |            | given              | timestamp = 1751539590099
 3.  |            | lastNonce          | nonce = 9223372036854775807
 4.  | 1,         | secp256k1          | pk = 04d545071374ee35b3c68dea1446f992a8539627f9c77ce6a99f4946cb3d9514c5c3e13cb74af509d4e5a31aa82253d927e9d549273a69c8ec22209cf05a8ff9c1
 5.  | 4, 2,      | genIds             | uname = Unforgeable(0xd768e57159280561389f6e7fbc7daeada5a8c0acf1e3aac87203b5ea070abbae)
 6.  | 3, 5,      | registry           | value = (9223372036854775807, bundle+ {   Unforgeable(0xd768e57159280561389f6e7fbc7daeada5a8c0acf1e3aac87203b5ea070abbae) })
 7.  | 6,         | protobuf           | toSign = 2a40aa013d0a0d2a0b10feffffffffffffffff010a2c5a2a0a263a240a220a20d768e57159280561389f6e7fbc7daeada5a8c0acf1e3aac87203b5ea070abbae1001
 8.  | 7, 1,      | secp256k1          | sig = 304402203975acecd9a2da3f76be255deca08efacdbab58845dfcb70e334cfbfa437ce530220686fdb874b11b58d80aca06af80d57ee60c27c68f061bffd81c5ad73eb203e24
 9.  | 4,         | registry           | uri = rho:id:eb6a9iqn4tqr9gaa6dzspiuee9g3mt9c1umrfwcpaugp6ctuijbnwj
 ----+------------+--------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------
 */

new
  Stack, rs(`rho:registry:insertSigned:secp256k1`), uriOut, merge, sizeP, elemP
in {
  contract Stack(@"init", ret) = {
    new stack in {
      @(*stack, *sizeP)!(0) |
      ret!(*stack)
    }
  } |

  contract Stack(@"push", @stack, @value, ret) = {
    for (@size <- @(stack, *sizeP)) {
      @(stack, *elemP, size)!(value) |
      @(stack, *sizeP)!(size + 1) |
      ret!(size + 1)
    }
  } |

  contract Stack(@"pop", @stack, ret) = {
    for (@size <- @(stack, *sizeP)) {
      if (size == 0) {
        @(stack, *sizeP)!(size) |
        ret!((false, "stack is empty"))
      } else {
        for(@value <- @(stack, *elemP, size - 1)) {
          @(stack, *sizeP)!(size - 1) |
          ret!((true, value))
        }
      }
    }
  } |

  contract merge(@stack, @begin, @end, ret) = {
    match (end - begin) {
      0 => ret!([])
      1 => {
        for(@value <<- @(stack, *elemP, begin)) {
          ret!([value])
        }
      }
      _ => {
        new left, right in {
          merge!(stack, begin, begin + (end - begin) / 2, *left) |
          merge!(stack, begin + (end - begin) / 2, end, *right) |

          for(@leftList <- left & @rightList <- right) {
            ret!(leftList ++ rightList)
          }
        }
      }
    }
  } |

  contract Stack(@"toList", @stack, ret) = {
    new mergedCh in {
      for (@size <- @(stack, *sizeP)) {
        merge!(stack, 0, size, *mergedCh) |

        for(@merged <- mergedCh) {
          @(stack, *sizeP)!(size) |
          ret!(merged)
        }
      }
    }
  } |

  rs!(
    "04d545071374ee35b3c68dea1446f992a8539627f9c77ce6a99f4946cb3d9514c5c3e13cb74af509d4e5a31aa82253d927e9d549273a69c8ec22209cf05a8ff9c1".hexToBytes(),
    (9223372036854775807, bundle+{*Stack}),
    "304402203975acecd9a2da3f76be255deca08efacdbab58845dfcb70e334cfbfa437ce530220686fdb874b11b58d80aca06af80d57ee60c27c68f061bffd81c5ad73eb203e24".hexToBytes(),
    *uriOut
  )
}
