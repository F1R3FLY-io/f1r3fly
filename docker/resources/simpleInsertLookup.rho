new simpleInsertTest, simpleInsertTestReturnID,
     simpleLookupTest, simpleLookupTestReturnID, // Define simpleLookupTest and simpleLookupTestReturnID
     ri(`rho:registry:insertArbitrary`),
     rl(`rho:registry:lookup`),  // To do registry lookup
     stdout(`rho:io:stdout`),
     stdoutAck(`rho:io:stdoutAck`), ack in {

    contract simpleInsertTest(registryIdentifier) = {
        stdout!("REGISTRY_SIMPLE_INSERT_TEST: create arbitrary process X to store in the registry") |
        new X, Y, innerAck in {
            stdoutAck!(*X, *innerAck) |
            for(_ <- innerAck){
                stdout!("REGISTRY_SIMPLE_INSERT_TEST: adding X to the registry and getting back a new identifier") |
                ri!(*X, *Y) |
                for(@uri <- Y) {
                    stdout!("REGISTRY_SIMPLE_INSERT_TEST: got an identifier for X from the registry") |
                    stdout!(uri) |
                    registryIdentifier!(uri)
                }
            }
        }
    } |

    contract simpleLookupTest(@uri, result) = {
        stdout!("REGISTRY_SIMPLE_LOOKUP_TEST: looking up X in the registry using identifier") |
        new lookupResponse in {
            rl!(uri, *lookupResponse) |  // Ensure that rl is correctly used here
            for(@val <- lookupResponse) {
                stdout!("REGISTRY_SIMPLE_LOOKUP_TEST: got X from the registry using identifier") |
                stdoutAck!(val, *result)
            }
        }
    } |

    // Invoke the simpleInsertTest contract
    simpleInsertTest!(*simpleInsertTestReturnID) |

    for(@idFromTest1 <- simpleInsertTestReturnID) {
        ack!(idFromTest1)
    } |

    // Invoke simpleLookupTest with proper parameters
    // Note: Replace 'someUri' with the actual URI
    // simpleLookupTest!("someUri", *simpleLookupTestReturnID) |

    // Handle the return from simpleLookupTest
    for(@idFromTest2 <- simpleLookupTestReturnID) {
        ack!(idFromTest2)
    }
}
