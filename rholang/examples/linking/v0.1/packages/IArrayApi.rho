//an immutable array data structure
export IArrayApi in {
  //there's all kinds of hacky RBL stuff in here
  //because I don't know how else to get the
  //efficiency one would expect from an array
  new 
    IsInBounds,
    Append, Concat, Contains, Drop, Flatten, Fold, Foreach, Get, 
    IndexOf, Length, Map, Print, RemoveElment, RemoveAt, SplitAt, Take
  in {
    contract IsInBounds(arr, i, return) = {
      new nch in {
        Length(arr, nch) | for(n <- nch) {
          return(i < n)
        }
      }
    } |
    contract Append(arr, value, return) = {
      return(arr.append(value))
    } |
    contract Concat(arr, other, return) = {
      new pairCh in {
        pairCh([arr, other]) | for(pair <- pairCh) {
          Flatten(pair, return)
        }
      }
    } |
    contract Contains(arr, value, return) = {
      new result in {
        IndexOf(arr, value, result) | for(r <- result){
          return(r >= 0)
        }
      }
    } |
    contract Drop(arr, n, return) = {
      new lenCh in {
        Length(arr, lenCh) | for(len <- lenCh) {
          match n > len with true => { return([]) }
          _ => {
            match n <= 0 with true => { return(arr) }
            _ => { return( (arr.cut(n)).nth(1)  ) }
          }
        }
      }
    } |
    contract Flatten(arr, return) = {
      new combinator, appendCombinator in {
        contract appendCombinator(head, accumulatedValue, return) = {
          Append(accumulatedValue, head, return)
        } |
        contract combinator(head, accumulatedValue, return) = {
          Fold(head, accumulatedValue, appendCombinator, return)
        } |
        Fold(arr, [], combinator, return)
      }
    } |
    contract Fold(arr, start, combinator, return) = {
      new loop, len, elem, nextVal in {
        Length(arr, len) | for(n <- len) {
          contract loop(index, accumulatedValue) = {
            match index < n with true => {
              Get(arr, index, elem) | for(e <- elem) {
                combinator(e, accumulatedValue, nextVal) | for(v <- nextVal) {
                  loop(index + 1, v)
                }
              }
            }
            _ => { return(accumulatedValue) }
          } |
          loop(0, start)
        }
      }
    } |
    contract Foreach(arr, proc, isDone) = {
      new combinator, nilReturn in {
        contract combinator(head, accumulatedValue, return) = {
          //need return flag from `proc` in order to guarantee execution order
          new isDone in { proc(head, isDone) | for(_ <- isDone){ return(Nil) } }
        } | 
        Fold(arr, Nil, combinator, nilReturn) | for(_ <- nilReturn){ isDone(true) }
      }
    } |
    contract Get(arr, i, return) = {
      new isInBoundsCh in {
        IsInBounds(arr, i, isInBoundsCh) | for(isInBounds <- isInBoundsCh) {
          match isInBounds with true => {
            return( arr.nth(i) )
          }
          _ => { return(Nil) }
        }
      }
    } |
    contract IndexOf(arr, value, return) = {
      new searchAt, len in {
        Length(arr, len) | for(n <- len) {
          contract searchAt(i, return) = {
            match i < n with true => {
              new result in {
                Get(arr, i, result) | for(elem <- result) {
                  match elem == value with true => { return(i) }
                  _ => { searchAt(i + 1, return) }
                }
              }
            }
            _ => { return(-1) }
          } |
          searchAt(0, return)
        }
      }
    } | 
    contract Length(arr, return) = {
      return( arr.size() )
    } |
    contract Map(arr, function, return) = {
      new combinator in {
        contract combinator(elem, accumulatedValue, return) = {
          new mappedElem in {
            function(elem, mappedElem) | 
            for(mElem <- mappedElem) {
              Append(accumulatedValue, mElem, return)
            }
          }
        } | 
        Fold(arr, [], combinator, return)
      }
    } |
    contract Print(arr, isDone) = {
      arr.display("\n") | isDone(true)
    } |
    contract RemoveElment(arr, value, return) = {
      return(arr.delete(value))
    } |
    contract RemoveAt(arr, i, return) = {
      new split, removed in {
        SplitAt(arr, i, split) | for(pair <- split) {
          match pair with [first, second] => {
            Drop(second, 1, removed) | for(newSecond <- removed) {
              Concat(first, newSecond, return)
            }
          }
        }
      }
    } |
    contract SplitAt(arr, i, return) = {
      new first, second in {
        Take(arr, i, first) | Drop(arr, i, second) |
        for(f <- first; s <- second) {
          return([f, s])
        }
      }
    } |
    contract Take(arr, n, return) = {
      new lenCh in {
        Length(arr, lenCh) | for(len <- lenCh) {
          match n > len with true => { return(arr) }
          _ => {
            match n <= 0 with true => { return([]) }
            _ => { return( (arr.cut(n)).nth(0)  ) }
          }
        }
      }
    } |
    contract IArrayApi(method, return) = {
      match method with
        "Append" => { return(Append) }
        "Concat" => { return(Concat) }
        "Contains" => { return(Contains) }
        "Drop" => { return(Drop) }
        "Flatten" => { return(Flatten) }
        "Fold" => { return(Fold) }
        "Foreach" => { return(Foreach) }
        "Get" => { return(Get) }
        "IndexOf" => { return(IndexOf) }
        "Length" => { return(Length) }
        "Print" => { return(Print) }
        "Map" => { return(Map) }
        "RemoveElment" => { return(RemoveElment) }
        "RemoveAt" => { return(RemoveAt) }
        "SplitAt" => { return(SplitAt) }
        "Take" => { return(Take) }
        _ => { "Method: ".display(method, " not found!") | return(Nil) }
    }
  }
}