//an immutable map data structure
export IMapApi in {
  import IArrayApi in {
    new
      ArrayIndexOf, ArrayAppend, ArrayRemoveAt,
      ArrayGet, ArrayContains, ArrayFold, ArrayMap,
      ArrayLength
    in {
      IArrayApi("IndexOf", ArrayIndexOf) | IArrayApi("Append", ArrayAppend) |
      IArrayApi("RemoveAt", ArrayRemoveAt) | IArrayApi("Get", ArrayGet) |
      IArrayApi("Contains", ArrayContains) | IArrayApi("Fold", ArrayFold) |
      IArrayApi("Map", ArrayMap) | IArrayApi("Length", ArrayLength) |
      for(
          arrIndexOf <- ArrayIndexOf; arrAppend <- ArrayAppend;
          arrRemoveAt <- ArrayRemoveAt; arrGet <- ArrayGet;
          arrContains <- ArrayContains; arrFold <- ArrayFold;
          arrMap <- ArrayMap; arrLength <- ArrayLength
      ) {
        new 
          Contains, EmptyMap, Get, GetOrElse, Keys,
          MapPairs, MapValues, Updated, UpdatedByPairs, Values
        in {
          contract Contains(map, key, return) = {
            match map with [keys, _] => {
              arrContains(keys, key, return)
            }
          } |
          contract EmptyMap(return) = {
            return([[], []])
          } |
          contract Get(map, key, return) = {
            match map with [keys, values] => {
              new result in {
                arrIndexOf(keys, key, result) | for(i <- result) {
                  match i >= 0 with true => {
                    arrGet(values, i, return)
                  }
                  _ => { return(Nil) }
                }
              }
            }
          } | 
          contract GetOrElse(map, key, default, return) = {
            new nilCh, result in {
              Get(map, key, result) | nilCh(Nil) |
              for(r <- result; nil <- nilCh) {
                match r == nil with true => { return(default) }
                _ => { return(r) }
              }
            }
          } |
          contract Keys(map, return) = {
            match map with [keys, _] => { return(keys) }
          } | 
          contract MapPairs(map, f, return) = {
            match map with [keys, values] => {
              new sizeCh, applyFunc in {
                arrLength(keys, sizeCh) | for(size <- sizeCh) {
                  contract applyFunc(currMap, i) = {
                    match i == size with true => { return(currMap) }
                    _ => {
                      new keyCh, valueCh, kvPairCh, result in {
                        arrGet(keys, i, keyCh) | arrGet(values, i, valueCh) |
                        for(key <- keyCh; value <- valueCh) {
                          f([key, value], kvPairCh) | for(kvPair <- kvPairCh) {
                            match kvPair with [newKey, newValue] => {
                              Updated(currMap, newKey, newValue, result) |
                              for(r <- result) { applyFunc(r, i + 1) }
                            }
                          }
                        }
                      }
                    }
                  } |
                  new emCh in {
                    EmptyMap(emCh) | for(em <- emCh) { applyFunc(em, 0) }
                  }
                }
              }
            }
          } |
          contract MapValues(map, f, return) = {
            match map with [keys, values] => {
              new mappedValuesCh in {
                arrMap(values, f, mappedValuesCh) |
                for(mappedValues <- mappedValuesCh) {
                  return([keys, mappedValues])
                }
              }
            }
          } |
          contract Updated(map, key, value, return) = {
            match map with [keys, values] => {
              new result in {
                arrIndexOf(keys, key, result) | for(i <- result) {
                  match i >= 0 with
                    true => {
                      new removedKeys, removedValues in {
                        arrRemoveAt(keys, i, removedKeys) | arrRemoveAt(values, i, removedValues) |
                        for(newKeys <- removedKeys; newValues <- removedValues) {
                          Updated([newKeys, newValues], key, value, return)
                        }
                      }
                    }
                    _ => {
                      new appendedKeys, appendedValues in {
                        arrAppend(keys, key, appendedKeys) | arrAppend(values, value, appendedValues) |
                        for(newKeys <- appendedKeys; newValues <- appendedValues) {
                          return([newKeys, newValues])
                        }
                      }
                    }
                }
              }
            }
          } |
          contract UpdatedByPairs(map, kvPairs, return) = {
            new combinator in {
              contract combinator(kvPair, currMap, return) = {
                match kvPair with [key, value] => {
                  Updated(currMap, key, value, return)
                }
                _ => { return(currMap) }
              } |
              arrFold(kvPairs, map, combinator, return)
            }
          } |
          contract Values(map, return) = {
            match map with [_, values] => { return(values) }
          } | 
          contract IMapApi(method, return) = {
            match method with 
              "Contains" => { return(Contains) }
              "EmptyMap" => { return(EmptyMap) }
              "Get" => { return(Get) }
              "GetOrElse" => { return(GetOrElse) }
              "Keys" => { return(Keys) }
              "MapPairs" => { return(MapPairs) }
              "MapValues" => { return(MapValues) }
              "Updated" => { return(Updated) }
              "UpdatedByPairs" => { return(UpdatedByPairs) }
              "Values" => { return(Values) }
              _ => { "Method: ".display(method, " not found!") | return(Nil) }
          }
        }
      }
    }
  }
}