//Based on sealer/unsealer pattern in http://erights.org/elib/capability/ode/ode-capabilities.html
//
//This design pattern makes it possible to restrict *access* to data/methods, but
//not necessarily *knowledge* of the data/methods (because everything is public 
//on a blockchain). However, restricting access is enough to ensure security in
//some situations. For example one could seal the method on a "purse" object which
//extracts the tokens inside, thus allowing only those with the unsealer to 
//take coins out of the purse.
//
//Note: This only works if process destructuring cannot be used. Otherwise,
//the `key` could be extracting by destructuring `sealedData`. Therefore,
//when matching on processes is introduced an `opaque` keyword will need to
//be added to the definition of `sealedData`.
export MakeBrandPair in {
  contract MakeBrandPair(return) = {
    new seal, unseal, key in {
      contract seal(@data, return) = {
        new sealedData in {
          contract sealedData(@input, return) = {
            match input == *key {
              true => { return!([data]) }
              _ => { return!([]) }
            }
          } |
          return!(*sealedData)
        }
      } |
      contract unseal(sealedData, return) = { sealedData!(*key, *return) } |
      return!([*seal, *unseal])
    }
  }
}
