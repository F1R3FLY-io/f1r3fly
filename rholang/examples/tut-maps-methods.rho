// all methods modifying the underlying collection return new Map
new stdout(`rho:io:stdout`) in {

  // prints 1
  stdout!({"one" : 1, "two" : 2, "three" : 3}.get("one")) |

  // if element is not present in the map will return Nil -- prints Nil
  stdout!({"one" : 1, "two" : 2, "three" : 3}.get("four")) |

  // prints 1 just like regular get
  stdout!({"one" : 1, "two" : 2, "three" : 3}.getOrElse("one", "default")) |

  // if element is not present in the map will return default -- prints default
  stdout!({"one" : 1, "two" : 2, "three" : 3}.getOrElse("four", "default")) |

  // print {"one" : 1, "two" : 999, "three" : 3}
  stdout!({"one" : 1, "two" : 2, "three" : 3}.set("two", 999)) |

  // prints false
  stdout!({"one" : 1, "two" : 2, "three" : 3}.contains("four")) |

  // prints true
  stdout!({"one" : 1, "two" : 2, "three" : 3}.contains("three")) |

  // prints @{{"three" : 3, "two" : 2}}
  stdout!({"one" : 1, "two" : 2, "three" : 3}.delete("one")) |

  // doesn't change the collection, prints @{{"one" : 1, "three" : 3, "two" : 2}}
  stdout!({"one" : 1, "two" : 2, "three" : 3}.delete("four")) |

  // returns new map which is a result of subtracting elements of second map from the base map
  stdout!({"one" : 1, "two" : 2, "three" : 3}.diff({"one" : 1, "four": 4})) |

  // diff looks only at keys, not values
  stdout!({"one" : 1, "two" : 2, "three" : 3}.diff({"one" : Nil, "four": Nil})) |

  // merges two maps -- returns @{{"four" : 4, "one" : 1, "three" : 3, "two" : 2}}
  stdout!({"one" : 1, "two" : 2, "three" : 3}.union({"one" : 1, "four": 4})) |

  // prints Set("one", "two", "three")
  stdout!({"one" : 1, "two" : 2, "three" : 3}.keys()) |

  // prints 3
  stdout!({"one" : 1, "two" : 2, "three" : 3}.size()) |

  // prints [("one", 1), ("three", 3), ("two, 2)]
  stdout!({"one" : 1, "two" : 2, "three" : 3}.toList())
}
