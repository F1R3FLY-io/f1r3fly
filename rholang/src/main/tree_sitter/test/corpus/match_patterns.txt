===================
Patterns in a match
===================

new sumProd in {
    contract sumProd(@arr, ret) = {
      new fold, sum, prod in {
        contract fold(@init, op, @arr, ret) = {
          match arr {
            [h ...t] => {
              new tailCh in {
                fold!(init, *op, t, *tailCh) |
                for (@folded <- tailCh) {
                  op!(h, folded, *ret)
                }
              }
            }
            [] => ret!(init)
          }
        } |
        contract sum(@arr, ret) = {
          new add in {
            contract add(@a, @b, ret) = {
              ret!(a + b)
            } |
            fold!(0, *add, arr, *ret)
          }
        } |
        contract prod(@arr, ret) = {
          new mult in {
            contract mult(@a, @b, ret) = {
              ret!(a * b)
            } |
            fold!(1, *mult, arr, *ret)
          }
        } |
        new sumCh, prodCh in {
          sum!(arr, *sumCh) |
          prod!(arr, *prodCh) |
          for (@s <- sumCh; @p <- prodCh) {
            ret!([s, p])
          }
        }
      }
    } |
    sumProd!([4,5,6], "stdout")
}

---

(source_file
  (new
    decls: (decls
      (name_decl
        (var)))
    proc: (block
      body: (par
        left: (contract
          name: (var)
          formals: (names
            (quote
              (var))
            (var))
          proc: (block
            body: (new
              decls: (decls
                (name_decl
                  (var))
                (name_decl
                  (var))
                (name_decl
                  (var)))
              proc: (block
                body: (par
                  left: (par
                    left: (par
                      left: (contract
                        name: (var)
                        formals: (names
                          (quote
                            (var))
                          (var)
                          (quote
                            (var))
                          (var))
                        proc: (block
                          body: (match
                            expression: (var)
                            cases: (cases
                              (case
                                pattern: (collection
                                  (list
                                    (var)
                                    cont: (var)))
                                proc: (block
                                  body: (new
                                    decls: (decls
                                      (name_decl
                                        (var)))
                                    proc: (block
                                      body: (par
                                        left: (send
                                          name: (var)
                                          send_type: (send_single)
                                          inputs: (inputs
                                            (var)
                                            (eval
                                              (var))
                                            (var)
                                            (eval
                                              (var))))
                                        right: (input
                                          formals: (receipts
                                            (linear_bind
                                              names: (names
                                                (quote
                                                  (var)))
                                              input: (simple_source
                                                (var))))
                                          proc: (block
                                            body: (send
                                              name: (var)
                                              send_type: (send_single)
                                              inputs: (inputs
                                                (var)
                                                (var)
                                                (eval
                                                  (var)))))))))))
                              (case
                                pattern: (collection
                                  (list))
                                proc: (send
                                  name: (var)
                                  send_type: (send_single)
                                  inputs: (inputs
                                    (var))))))))
                      right: (contract
                        name: (var)
                        formals: (names
                          (quote
                            (var))
                          (var))
                        proc: (block
                          body: (new
                            decls: (decls
                              (name_decl
                                (var)))
                            proc: (block
                              body: (par
                                left: (contract
                                  name: (var)
                                  formals: (names
                                    (quote
                                      (var))
                                    (quote
                                      (var))
                                    (var))
                                  proc: (block
                                    body: (send
                                      name: (var)
                                      send_type: (send_single)
                                      inputs: (inputs
                                        (add
                                          left: (var)
                                          right: (var))))))
                                right: (send
                                  name: (var)
                                  send_type: (send_single)
                                  inputs: (inputs
                                    (long_literal)
                                    (eval
                                      (var))
                                    (var)
                                    (eval
                                      (var))))))))))
                    right: (contract
                      name: (var)
                      formals: (names
                        (quote
                          (var))
                        (var))
                      proc: (block
                        body: (new
                          decls: (decls
                            (name_decl
                              (var)))
                          proc: (block
                            body: (par
                              left: (contract
                                name: (var)
                                formals: (names
                                  (quote
                                    (var))
                                  (quote
                                    (var))
                                  (var))
                                proc: (block
                                  body: (send
                                    name: (var)
                                    send_type: (send_single)
                                    inputs: (inputs
                                      (mult
                                        left: (var)
                                        right: (var))))))
                              right: (send
                                name: (var)
                                send_type: (send_single)
                                inputs: (inputs
                                  (long_literal)
                                  (eval
                                    (var))
                                  (var)
                                  (eval
                                    (var))))))))))
                  right: (new
                    decls: (decls
                      (name_decl
                        (var))
                      (name_decl
                        (var)))
                    proc: (block
                      body: (par
                        left: (par
                          left: (send
                            name: (var)
                            send_type: (send_single)
                            inputs: (inputs
                              (var)
                              (eval
                                (var))))
                          right: (send
                            name: (var)
                            send_type: (send_single)
                            inputs: (inputs
                              (var)
                              (eval
                                (var)))))
                        right: (input
                          formals: (receipts
                            (linear_bind
                              names: (names
                                (quote
                                  (var)))
                              input: (simple_source
                                (var)))
                            (linear_bind
                              names: (names
                                (quote
                                  (var)))
                              input: (simple_source
                                (var))))
                          proc: (block
                            body: (send
                              name: (var)
                              send_type: (send_single)
                              inputs: (inputs
                                (collection
                                  (list
                                    (var)
                                    (var)))))))))))))))
        right: (send
          name: (var)
          send_type: (send_single)
          inputs: (inputs
            (collection
              (list
                (long_literal)
                (long_literal)
                (long_literal)))
            (string_literal)))))))
