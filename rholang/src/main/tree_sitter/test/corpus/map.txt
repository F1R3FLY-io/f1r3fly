====
Map
====

new map, stdout(`rho:io:stdout`) in {
   map!({}) |

   for(@m <- map) {
     map!(m.set("key1", "value1")) |
     stdout!("Inserted 'key1' with 'value1' into the map.")
   } |

   for(m <- map) {
     new lookupResponse in {
       m!("get", "key1", *lookupResponse) |
       for(@value <- lookupResponse) {
         stdout!(value)
       }
     }
   } |

   for(@m <- map) {
     map!(m.delete("key1")) |
     stdout!("Removed 'key1' from the map.")
   }
}

---

(source_file
  (new
    decls: (decls
      (name_decl
        (var))
      (name_decl
        (var)
        uri: (uri_literal)))
    proc: (block
      body: (par
        left: (par
          left: (par
            left: (send
              name: (var)
              send_type: (send_single)
              inputs: (inputs
                (collection
                  (map))))
            right: (input
              formals: (receipts
                (linear_bind
                  names: (names
                    (quote
                      (var)))
                  input: (simple_source
                    (var))))
              proc: (block
                body: (par
                  left: (send
                    name: (var)
                    send_type: (send_single)
                    inputs: (inputs
                      (method
                        receiver: (var)
                        name: (var)
                        args: (args
                          (string_literal)
                          (string_literal)))))
                  right: (send
                    name: (var)
                    send_type: (send_single)
                    inputs: (inputs
                      (string_literal)))))))
          right: (input
            formals: (receipts
              (linear_bind
                names: (names
                  (var))
                input: (simple_source
                  (var))))
            proc: (block
              body: (new
                decls: (decls
                  (name_decl
                    (var)))
                proc: (block
                  body: (par
                    left: (send
                      name: (var)
                      send_type: (send_single)
                      inputs: (inputs
                        (string_literal)
                        (string_literal)
                        (eval
                          (var))))
                    right: (input
                      formals: (receipts
                        (linear_bind
                          names: (names
                            (quote
                              (var)))
                          input: (simple_source
                            (var))))
                      proc: (block
                        body: (send
                          name: (var)
                          send_type: (send_single)
                          inputs: (inputs
                            (var)))))))))))
        right: (input
          formals: (receipts
            (linear_bind
              names: (names
                (quote
                  (var)))
              input: (simple_source
                (var))))
          proc: (block
            body: (par
              left: (send
                name: (var)
                send_type: (send_single)
                inputs: (inputs
                  (method
                    receiver: (var)
                    name: (var)
                    args: (args
                      (string_literal)))))
              right: (send
                name: (var)
                send_type: (send_single)
                inputs: (inputs
                  (string_literal))))))))))
