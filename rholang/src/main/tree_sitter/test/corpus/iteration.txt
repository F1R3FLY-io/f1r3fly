==========
Iteration
==========

new iterate in {
    contract iterate(@list, process, done) = {
      match list {
        [hd ...tl] => {
          new ack in {
            process!(hd, *ack) |
            for (_ <- ack) { iterate!(tl, *process, *done) }
          }
        }
        _ => done!(Nil)
      }
    } |
    new process, done in {
      iterate!([4,5,6], *process, *done) |
      contract process(@item, ack) = {
        /* handle processing of item */
        ack!(Nil)
      } |
      for (_ <- done) {
         /* done! */
        Nil
      }
    }
  }

---

(source_file
  (new
    decls: (decls
      (name_decl
        (var)))
    proc: (block
      body: (par
        left: (contract
          name: (var)
          formals: (names
            (quote
              (var))
            (var)
            (var))
          proc: (block
            body: (match
              expression: (var)
              cases: (cases
                (case
                  pattern: (collection
                    (list
                      (var)
                      cont: (var)))
                  proc: (block
                    body: (new
                      decls: (decls
                        (name_decl
                          (var)))
                      proc: (block
                        body: (par
                          left: (send
                            name: (var)
                            send_type: (send_single)
                            inputs: (inputs
                              (var)
                              (eval
                                (var))))
                          right: (input
                            formals: (receipts
                              (linear_bind
                                names: (names
                                  (wildcard))
                                input: (simple_source
                                  (var))))
                            proc: (block
                              body: (send
                                name: (var)
                                send_type: (send_single)
                                inputs: (inputs
                                  (var)
                                  (eval
                                    (var))
                                  (eval
                                    (var)))))))))))
                (case
                  pattern: (wildcard)
                  proc: (send
                    name: (var)
                    send_type: (send_single)
                    inputs: (inputs
                      (nil))))))))
        right: (new
          decls: (decls
            (name_decl
              (var))
            (name_decl
              (var)))
          proc: (block
            body: (par
              left: (par
                left: (send
                  name: (var)
                  send_type: (send_single)
                  inputs: (inputs
                    (collection
                      (list
                        (long_literal)
                        (long_literal)
                        (long_literal)))
                    (eval
                      (var))
                    (eval
                      (var))))
                right: (contract
                  name: (var)
                  formals: (names
                    (quote
                      (var))
                    (var))
                  proc: (block
                    body: (send
                      name: (var)
                      send_type: (send_single)
                      inputs: (inputs
                        (nil))))))
              right: (input
                formals: (receipts
                  (linear_bind
                    names: (names
                      (wildcard))
                    input: (simple_source
                      (var))))
                proc: (block
                  body: (nil))))))))))
