========================================
Sending and receiving multiple processes
========================================

new chan, stdout(`rho:io:stdout`) in {
  chan!(1,2,3) |
  chan!((4,5,6)) |
  chan!(7,8) |
  chan!([9, 10], 11) |
  chan!(12 | 13) |
  for (@x, @y, @z <= chan) {
    stdout!(["three", x, y, z])
  } |
  for (@a, @b <= chan) {
    stdout!(["two", a, b])
  } |
  for (@a <= chan) {
    stdout!(["one", a])
  }
}

---

(source_file
  (new
    decls: (decls
      (name_decl
        (var))
      (name_decl
        (var)
        uri: (uri_literal)))
    proc: (block
      body: (par
        left: (par
          left: (par
            left: (par
              left: (par
                left: (par
                  left: (par
                    left: (send
                      name: (var)
                      send_type: (send_single)
                      inputs: (inputs
                        (long_literal)
                        (long_literal)
                        (long_literal)))
                    right: (send
                      name: (var)
                      send_type: (send_single)
                      inputs: (inputs
                        (collection
                          (tuple
                            (long_literal)
                            (long_literal)
                            (long_literal))))))
                  right: (send
                    name: (var)
                    send_type: (send_single)
                    inputs: (inputs
                      (long_literal)
                      (long_literal))))
                right: (send
                  name: (var)
                  send_type: (send_single)
                  inputs: (inputs
                    (collection
                      (list
                        (long_literal)
                        (long_literal)))
                    (long_literal))))
              right: (send
                name: (var)
                send_type: (send_single)
                inputs: (inputs
                  (par
                    left: (long_literal)
                    right: (long_literal)))))
            right: (input
              formals: (receipts
                (repeated_bind
                  names: (names
                    (quote
                      (var))
                    (quote
                      (var))
                    (quote
                      (var)))
                  input: (var)))
              proc: (block
                body: (send
                  name: (var)
                  send_type: (send_single)
                  inputs: (inputs
                    (collection
                      (list
                        (string_literal)
                        (var)
                        (var)
                        (var))))))))
          right: (input
            formals: (receipts
              (repeated_bind
                names: (names
                  (quote
                    (var))
                  (quote
                    (var)))
                input: (var)))
            proc: (block
              body: (send
                name: (var)
                send_type: (send_single)
                inputs: (inputs
                  (collection
                    (list
                      (string_literal)
                      (var)
                      (var))))))))
        right: (input
          formals: (receipts
            (repeated_bind
              names: (names
                (quote
                  (var)))
              input: (var)))
          proc: (block
            body: (send
              name: (var)
              send_type: (send_single)
              inputs: (inputs
                (collection
                  (list
                    (string_literal)
                    (var)))))))))))
