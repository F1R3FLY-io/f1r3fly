.TH CPMAKE 1L "15 August 1992" "MCC Carnot Project" "LOCAL USER COMMANDS"
.SH NAME
cpmake \- Carnot Project front-end to GNU make
.SH SYNOPSIS
.B "cpmake "
[
.B \-f
makefile ] [ option ] ...
target ...
.SH CAVEAT
This man page contains information extracted from the documentation of
.I GNU make.
For complete information, refer to the 
.I GNU Make Manual.
.SH DESCRIPTION
.LP
This man page describes the 
.IR cpmake
shell script which utilizes the GNU implementation of
.IR make,
written by Richard Stallman and Roland McGrath.
The purpose of the
.I cpmake
utility is to act as a front-end to 
.I GNU make,
providing default and architecture specific options to drive the generation of Carnot software 
modules on multiple architectures.
.I cpmake
expects that the
.I GNU make
program is installed with the name
.B gmake
(see the 
.I make(1L) 
man page) somewhere in the current execution path.
.LP
.IR cpmake
is written to be architecture independent, but it relies on
Carnot specific 
.IR makefiles, 
and the
.IR carch(1L)
utility, a companion shell script used to deduce architecture specific
information.
.LP
.I cpmake
executes
.B gmake,
passing along all options given on the
.IR cpmake
command line, while adding Carnot specific options, such as
the pathname of the directory containing default Carnot include files
(see 
.B \-I
below).
.I cpmake
will look for the makefile
.IR GNUmakefile.
Carnot makefiles are called
.IR GNUmakefile ,
to identify them as
.I GNU make
specific, since a 
.I GNUmakefile
cannot be processed by traditional Unix 
.IR make 
programs.
.LP
.SH OPTIONS
.sp 1
.TP 0.5i
.B \-b
.TP 0.5i
.B \-m
These options are ignored for compatibility with other versions of 
.I GNU make .
.TP 0.5i
.BI "\-C " dir
Change to directory
.I dir
before reading the makefiles or doing anything else.
If multiple
.B \-C
options are specified, each is interpreted relative to the
previous one:
.BR "\-C " /
.BR "\-C " etc
is equivalent to
.BR "\-C " /etc.
This is typically used with recursive invocations of
.I cpmake .
.TP 0.5i
.B \-d
Print debugging information in addition to normal processing.
The debugging information says which files are being considered for
remaking, which file-times are being compared and with what results,
which files actually need to be remade, which implicit rules are
considered and which are applied---everything interesting about how
.I GNU make
decides what to do.
.TP 0.5i
.BI "\-f " file
Use
.I file as a makefile.
.TP 0.5i
.B \-i
Ignore all errors in commands executed to remake files.
.TP 0.5i
.BI "\-I " dir
Specifies a directory
.I dir
to search for included makefiles.
If several
.B \-I
options are used to specify several directories, the directories are
searched in the order specified.
Unlike the arguments to other flags of 
.I cpmake ,
directories given with
.B \-I
flags may come directly after the flag:
.BI \-I dir
is allowed, as well as
.BI "\-I " dir.
This syntax is allowed for compatibility with the C
preprocessor's
.B \-I
flag.
.TP 0.5i
.BI "\-j " jobs
Specifies the number of jobs (commands) to run simultaneously.
If there is more than one
.B \-j
option, the last one is effective.
If the
.B \-j
option is given without an argument,
.I cpmake
will not limit the number of jobs that can run simultaneously.
.TP 0.5i
.B \-k
Continue as much as possible after an error.
While the target that failed, and those that depend on it, cannot
be remade, the other dependencies of these targets can be processed
all the same.
.TP 0.5i
.B \-l
.TP 0.5i
.BI "\-l " load
Specifies that no new jobs (commands) should be started if there are
others jobs running and the load average is at least
.I load
(a floating-point number).
With no argument, removes a previous load limit.
.TP 0.5i
.B \-n
Print the commands that would be executed, but do not execute them.
.TP 0.5i
.BI "\-o " file
Do not remake the file
.I file
even if it is older than its dependencies, and do not remake anything
on account of changes in
.IR file .
Essentially the file is treated as very old and its rules are ignored.
.TP 0.5i
.B \-p
Print the data base (rules and variable values) that results from
reading the makefiles; then execute as usual or as otherwise
specified.
This also prints the version information given by the
.B \-v
switch (see below).
To print the data base without trying to remake any files, use
.B cpmake
.B \-p
.BI \-f /dev/null.
.TP 0.5i
.B \-q
``Question mode''.
Do not run any commands, or print anything; just return an exit status
that is zero if the specified targets are already up to date, nonzero
otherwise.
.TP 0.5i
.B \-r
Eliminate use of the built-in implicit rules.
Also clear out the default list of suffixes for suffix rules.
.TP 0.5i
.B \-s
Silent operation; do not print the commands as they are executed.
.TP 0.5i
.B \-S
Cancel the effect of the
.B \-k
option.
This is never necessary except in a recursive 
.I cpmake
where
.B \-k
might be inherited from the top-level 
.I cpmake
via MAKEFLAGS or if you set
.B \-k
in MAKEFLAGS in your environment.
.TP 0.5i
.B \-t
Touch files (mark them up to date without really changing them)
instead of running their commands.
This is used to pretend that the commands were done, in order to fool
future invocations of
.I cpmake.
.TP 0.5i
.B \-v
Print the version of the 
.I GNU make
program plus a copyright, a list of authors and a notice that there
is no warranty.
After this information is printed, processing continues normally.
To get this information without doing anything else, use
.B cpmake
.B \-v
.BI \-f /dev/null.
.TP 0.5i
.B \-w
Print a message containing the working directory
before and after other processing.
This may be useful for tracking down errors from complicated nests of
recursive
.I cpmake
commands.
.TP 0.5i
.BI "\-W " file
Pretend that the target
.I file
has just been modified.
When used with the
.B \-n
flag, this shows you what would happen if you were to modify that file.
Without
.BR \-n ,
it is almost the same as running a
.I touch
command on the given file before running
.I cpmake,
except that the modification time is changed only in the imagination of 
.I cpmake .
.SH "SEE ALSO"
.PD 0
.TP 2.0i
carch(1L), make(1L)
.TP 0.25i
~carnot/defs/*.defs
.TP 0.25i
~carnot/include/mk/*.defs
.TP 0.25i
~carnot/include/mk/*.mk
.PD
.SH BUGS
See the chapter `Problems and Bugs' in
.I "The GNU Make Manual" .
.SH AUTHOR
This manual page was written by Greg Lavender of the MCC Carnot Project.
The text is derived from the 
.I GNU make
manual page contributed by Dennis Morse of Stanford University and
reworked by Roland McGrath.
