#!/bin/bash
set -eu -o pipefail

# Store virtualenv in integration-tests/.venv instead of the magic path with
# hash that Pipenv creates, so that it remains on known path for easy caching.
export PIPENV_VENV_IN_PROJECT=1

# Pytest would read integration-tests/pytest.ini where log_file_level is set to
# debug, which would result in real-time output from tests including logs from
# running nodes. That's OK for local development but it makes it hard to see
# which tests failed in CI. With ERROR level, output of only failed jobs is
# printed after all tests finish.
export PYTEST_ADDOPTS="${PYTEST_ADDOPTS-} --log-cli-level=ERROR"

# The virtual environment should have been initialized at this point.
export _SKIP_VIRTUALENV_INIT=1

if [[ $TESTS != REMAINDER ]]; then
	# Check code (Pylint & mypy) only once, when running the REMAINDER
	# selection. Do not remove/modify REMAINDER selection!
	export _SKIP_CHECK_CODE=1
fi

GITHUB_DIR="$(dirname "$0")"
TEST_SELECTION="$("$GITHUB_DIR/print-integration-test-selection")"

ret=0
./run_tests -k "$TEST_SELECTION" || ret=$?

# Exit code 5:	No tests were collected
# Source: http://doc.pytest.org/en/latest/usage.html#possible-exit-codes
if [[ $TESTS == REMAINDER && $ret -eq 5 ]]; then
	# This could mean that explicit test selections were exhaustive and there're
	# no remaining tests to run. That's OK. At least we run ./check_code.
	ret=0
fi

exit $ret
