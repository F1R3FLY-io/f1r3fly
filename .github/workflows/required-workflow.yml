name: Build, Test, and Deploy (required)
on:
  push:
    branches:
      - staging
      - trying
    tags: '**'
  pull_request:
    branches:
      - dev
      - main
      - 'feature/**'

env:
  # This is read by every new JVM. Every JVM thinks it can use up to 80% of
  # total memory available to the system (used or unused). This may not be
  # appropriate when sbt is configured to run tests in parallel in forked JVMs.
  # However, setting this value too low or leaving it at default value, 25% on
  # OpenJDK 11, makes some unit tests occasionally fail on OutOfMemoryError on
  # GitHub runners which have only 7GB of RAM.
  _JAVA_OPTIONS: -XX:MaxRAMPercentage=80.0 -XX:MaxDirectMemorySize=128M
  SBT_OPTS: -Dsbt.task.timings=true -Xmx4g -Xss2m -Dsbt.supershell=false

jobs:
  # Build and save artifacts for next jobs.
  build_base:
    name: Build Base
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ env.VERSION }}
      BRANCH: ${{ env.BRANCH }}
      DEV_LATEST_TAG: ${{ env.DEV_LATEST_TAG }}
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4

      - name: Set up GHC ${{ matrix.ghc-version }}
        uses: haskell-actions/setup@v2

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'sbt'

      - name: Add SBT APT repositories
        shell: bash -ex {0}
        run: |
          # https://www.scala-sbt.org/1.x/docs/Installing-sbt-on-Linux.html#Ubuntu+and+other+Debian-based+distributions
          echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" | sudo tee /etc/apt/sources.list.d/sbt.list
          echo "deb https://repo.scala-sbt.org/scalasbt/debian /" | sudo tee /etc/apt/sources.list.d/sbt_old.list
          curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | sudo apt-key add

      - name: Install APT Dependencies
        shell: bash -ex {0}
        run: |
          sudo apt-get update
          sudo apt-get install -y $(cat .github/apt-dependencies.txt)

      - name: Generate Cabal cache key
        id: cabal-cache-key
        shell: bash -ex {0}
        run: |
          cabal update
          echo "key=$(sha256sum ~/.cabal/packages/* | sha256sum | awk '{print $1}')" >> $GITHUB_OUTPUT

      - name: Cache Cabal store
        uses: actions/cache@v4
        with:
          path: |
            ~/.cabal/store
            ~/.cabal/packages
            ~/.cabal/bin
          key: ${{ runner.os }}-cabal-${{ hashFiles('.github/cabal-dependencies.txt') }}-${{ steps.cabal-cache-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-cabal-

      - name: Install Cabal dependencies
        shell: bash -ex {0}
        run: |
          set -ex
          cabal update
          xargs cabal install --overwrite-policy=always < .github/cabal-dependencies.txt
          echo "$HOME/.cabal/bin" >> $GITHUB_PATH

      - name: Tool versions
        shell: bash -ex {0}
        run: |
          ghc --version
          cabal --version
          alex --version
          happy --version
          bnfc --version
          java -version
          sbt --version
          python --version
          pip --version

      - name: Initialize Environment
        shell: bash -exu -o pipefail {0}
        run: |
          git fetch origin
          git fetch origin --tags

          # Version from Git repository (tag-commit)
          VERSION="$(git describe --tags --always)"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          # Find latest tag on dev branch, with fallback
          if git ls-remote --heads origin dev | grep -q "refs/heads/dev"; then
            DEV_LATEST_TAG="$(git describe --tags --abbrev=0 origin/dev 2>/dev/null || echo 'unknown')"
          else
            DEV_LATEST_TAG="unknown"
          fi
          echo "DEV_LATEST_TAG=$DEV_LATEST_TAG" >> $GITHUB_ENV

          # Find related HEAD branch
          BRANCH=""
          if [[ $GITHUB_REF =~ ^refs/tags/ ]]; then
            # Tag related to multiple branches leaves empty branch variable
            RAW_BRANCH=$(git branch -r --contains ${{ github.ref }})
            if [[ $RAW_BRANCH =~ ^[\ ]*origin/([^ ]*)$ ]]; then
              BRANCH="${BASH_REMATCH[1]}"
            fi
          elif [[ $GITHUB_REF =~ ^refs/heads/ ]]; then
            BRANCH=${GITHUB_REF#refs/*/}
          else
            BRANCH=$GITHUB_HEAD_REF
          fi
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV

      - name: Compile
        shell: bash -ex {0}
        run: sbt update scalafmtCheckAll compile

      - name: Pack Working Tree
        shell: bash -ex {0}
        run: tar -H posix -czf /tmp/rchain-worktree.tar.gz .

      - name: Save Working Tree
        uses: actions/upload-artifact@v4
        with:
          name: rchain-worktree
          path: /tmp/rchain-worktree.tar.gz


  required_scala_unit_tests:
    name: Required Unit Tests (Scala)
    needs: build_base
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # This runs unit tests in parallel.
        #
        # For each entry a runner node is spawned with entry value in
        # matrix.tests workflow variable, which is also put into TESTS
        # environment variable (see below) and used by last step, execution of
        # .github/run-unit-test-selection, which splits it according to shell
        # rules (except for REMAINDER) and passes it as arguments to sbt.
        #
        # To learn about REMAINDER, see .github/run-unit-test-selection.
        tests:
          - "'casper/test:testOnly coop.rchain.casper.addblock.*'"
          - "'casper/test:testOnly coop.rchain.casper.api.*'"
          - "'casper/test:testOnly coop.rchain.casper.batch1.*'"
          - "'casper/test:testOnly coop.rchain.casper.engine.*'"
          - "'casper/test:testOnly coop.rchain.casper.genesis.*'"
          - "'casper/test:testOnly coop.rchain.casper.merging.*'"
          - "'casper/test:testOnly coop.rchain.casper.util.*'"
          - "'casper/test:testOnly coop.rchain.node.api.LspServiceSpec'"
    env:
      TESTS: ${{ matrix.tests }}
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'sbt'

      - name: Add SBT APT repositories
        shell: bash -ex {0}
        run: |
          # https://www.scala-sbt.org/1.x/docs/Installing-sbt-on-Linux.html#Ubuntu+and+other+Debian-based+distributions
          echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" | sudo tee /etc/apt/sources.list.d/sbt.list
          echo "deb https://repo.scala-sbt.org/scalasbt/debian /" | sudo tee /etc/apt/sources.list.d/sbt_old.list
          curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | sudo apt-key add

      - name: Install APT Dependencies
        shell: bash -ex {0}
        run: |
          sudo apt-get update
          sudo apt-get install -y $(cat .github/apt-dependencies.txt)

      - name: Load Working Tree
        uses: actions/download-artifact@v4
        with:
          name: rchain-worktree
          path: /tmp

      - name: Restore Working Tree
        shell: bash -ex {0}
        run: tar -H posix -xzf /tmp/rchain-worktree.tar.gz

      - name: Run Unit Tests
        shell: bash -ex {0}
        run: .github/run-unit-test-selection


  # Get compiled RChain, build Docker image, and save it for next jobs.
  build_docker_image:
    name: Build Docker Image
    needs: build_base
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'sbt'

      - name: Add SBT APT repositories
        shell: bash -ex {0}
        run: |
          # https://www.scala-sbt.org/1.x/docs/Installing-sbt-on-Linux.html#Ubuntu+and+other+Debian-based+distributions
          echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" | sudo tee /etc/apt/sources.list.d/sbt.list
          echo "deb https://repo.scala-sbt.org/scalasbt/debian /" | sudo tee /etc/apt/sources.list.d/sbt_old.list
          curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | sudo apt-key add

      - name: Install APT Dependencies
        shell: bash -ex {0}
        run: |
          sudo apt-get update
          sudo apt-get install -y $(cat .github/apt-dependencies.txt)

      - name: Load Working Tree
        uses: actions/download-artifact@v4
        with:
          name: rchain-worktree
          path: /tmp

      - name: Restore Working Tree
        shell: bash -ex {0}
        run: tar -H posix -xzf /tmp/rchain-worktree.tar.gz

      - name: Build Docker Image
        shell: bash -ex {0}
        run: |
          sbt ";compile ;project node ;Docker/publishLocal ;project rchain"

      - name: Export Docker Image
        shell: bash -ex {0}
        run: |
          mkdir ../artifacts
          git describe --tags --always >../artifacts/version.txt
          docker image save f1r3flyindustries/f1r3fly-scala-node \
              | gzip > /tmp/rnode-docker.tar.gz

      - name: Save Docker Image
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-docker
          path: /tmp/rnode-docker.tar.gz


  # Get compiled RChain, build distro packages, and save them for next jobs.
  build_packages:
    name: Build Packages
    needs: build_base
    if: "github.event_name != 'pull_request'"
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'sbt'

      - name: Add SBT APT repositories
        shell: bash -ex {0}
        run: |
          # https://www.scala-sbt.org/1.x/docs/Installing-sbt-on-Linux.html#Ubuntu+and+other+Debian-based+distributions
          echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" | sudo tee /etc/apt/sources.list.d/sbt.list
          echo "deb https://repo.scala-sbt.org/scalasbt/debian /" | sudo tee /etc/apt/sources.list.d/sbt_old.list
          curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | sudo apt-key add

      - name: Install APT Dependencies
        shell: bash -ex {0}
        run: |
          sudo apt-get update
          sudo apt-get install -y $(cat .github/apt-dependencies.txt)

      - name: Load Working Tree
        uses: actions/download-artifact@v4
        with:
          name: rchain-worktree
          path: /tmp

      - name: Restore Working Tree
        shell: bash -ex {0}
        run: tar -H posix -xzf /tmp/rchain-worktree.tar.gz

      - name: Build Packages
        shell: bash -ex {0}
        run: sbt
          node/universal:packageZipTarball
          node/debian:packageBin
          node/rpm:packageBin

      - name: Export Packages
        shell: bash -ex {0}
        run: |
          mkdir /tmp/artifacts
          git describe --tags --always >/tmp/artifacts/version.txt
          cp -av \
              node/target/universal/rnode-*.tgz \
              node/target/rnode_*.deb \
              node/target/rpm/RPMS/noarch/rnode-*.rpm \
              /tmp/artifacts/

      - name: Save Packages
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-packages
          path: /tmp/artifacts/


  # Get RNode Docker image and run integration tests.
  #
  # These steps are run directly on runner's host (note there's no container key
  # in the job configuration). That is because bind mounting in container runner
  # is broken[1] and we need to mount host's /tmp onto container's /tmp (see
  # "Running from Docker" in integration-tests/README.md). The host doesn't have
  # everything we need (pipenv, pyenv), so we're going to run integration tests
  # in rchain/buildenv container started manually as the last step.
  #
  # The problem is that host's runner runs everything under a non-privileged
  # account, whereas the rchain/buildenv container runs as root by default. The
  # container image does not have an account corresponding to the host's
  # unprivileged account UID, so we're going to run it as root and do some
  # workarounds (see below).
  #
  # [1] https://github.community/t5/GitHub-Actions/Container-volumes-key-not-mounting-volume/m-p/34798
  required_integration_tests:
    name: Required Integration Tests
    needs: build_docker_image
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        tests:
          - test_backward_compatible
          - test_genesis_ceremony
          - test_storage
          - test_wallets
          - test_healthcheck
    env:
      TESTS: ${{ matrix.tests }}
      _JAVA_OPTIONS: -XX:MaxRAMPercentage=35.0
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'sbt'

      - name: Add SBT APT repositories
        shell: bash -ex {0}
        run: |
          # https://www.scala-sbt.org/1.x/docs/Installing-sbt-on-Linux.html#Ubuntu+and+other+Debian-based+distributions
          echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" | sudo tee /etc/apt/sources.list.d/sbt.list
          echo "deb https://repo.scala-sbt.org/scalasbt/debian /" | sudo tee /etc/apt/sources.list.d/sbt_old.list
          curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | sudo apt-key add

      - name: Install APT Dependencies
        shell: bash -ex {0}
        run: |
          sudo apt-get update
          sudo apt-get install -y $(cat .github/apt-dependencies.txt)

      - uses: actions/setup-python@v5
        with:
          python-version: '3.7.17'
          cache: 'pip'

      - name: Install Python dependencies
        shell: bash -ex {0}
        run: |
          pip install pipenv
          pushd integration-tests
          pipenv sync
          popd

      - name: Load Docker Image
        uses: actions/download-artifact@v4
        with:
          name: artifacts-docker
          path: /tmp

      - name: Import Docker Image
        shell: bash -ex {0}
        run: zcat /tmp/rnode-docker.tar.gz | docker image load

      - name: Run Integration Test
        shell: bash -ex {0}
        run: |
          pushd integration-tests
          pipenv run ../.github/run-integration-test-selection
          popd


  # release_* jobs make built artifacts available to public and run only on new
  # tags or pushes to "staging" or "trying" branches used by Bors (bors r+ and bors try).
  # These jobs require secrets! See "env" variables and "Secrets" page in GitHub repository
  # settings. Release destinations differ slightly depending on the event that
  # triggered the job (tag or branch push). See "Publish ..." steps for details.
  # VERSION and BRANCH are used from "build_base" job outputs as a new way to share
  # data between jobs and steps. Legacy "version" via artifact file is still used.


  # Upload built Docker image to Docker Hub.
  release_docker_image:
    name: Release Docker Image
    needs:
      - required_scala_unit_tests
      - required_integration_tests
      - build_docker_image
      - build_base
    if: "github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/trying' || github.ref == 'refs/heads/staging')"
    runs-on: ubuntu-latest
    steps:
      - name: Load Docker Image
        uses: actions/download-artifact@v4
        with:
          name: artifacts-docker
          path: /tmp

      - name: Import Docker Image
        shell: bash -ex {0}
        run: zcat /tmp/rnode-docker.tar.gz | docker image load

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Publish Docker Image
        env:
          SOURCE_DOCKER_IMAGE_NAME: f1r3flyindustries/f1r3fly-scala-node
          TARGET_DOCKER_IMAGE_NAME: ${{ secrets.LEGACY_DOCKER_IMAGE_NAME }}
          VERSION: ${{ needs.build_base.outputs.VERSION }}
          BRANCH: ${{ needs.build_base.outputs.BRANCH }}
          DEV_LATEST_TAG: ${{ needs.build_base.outputs.DEV_LATEST_TAG }}
        shell: bash -exu -o pipefail {0}
        run: |
          if [[ -z "$TARGET_DOCKER_IMAGE_NAME" ]]; then
            echo "Required variable \$TARGET_DOCKER_IMAGE_NAME is not set." >&2
            exit 1
          fi

          SUFFIX=""
          CI_RUN=""

          if [[ "$BRANCH" =~ ^(trying|staging)$ ]]; then
            SUFFIX="-$BRANCH"
            if [[ $BRANCH =~ ^trying$ ]]; then
              CI_RUN="-ci-$GITHUB_RUN_NUMBER"
            fi
          fi

          set -x

          IMAGE_NAME="$TARGET_DOCKER_IMAGE_NAME$SUFFIX"
          IMG_VERSION_RAW="$IMAGE_NAME:$VERSION$CI_RUN"
          IMG_VERSION="${IMG_VERSION_RAW//[+]/__}"
          IMG_LATEST="$IMAGE_NAME:latest"

          docker tag $SOURCE_DOCKER_IMAGE_NAME $IMG_VERSION
          docker tag $SOURCE_DOCKER_IMAGE_NAME $IMG_LATEST
          docker push $IMG_VERSION
          docker push $IMG_LATEST

  # GitHub (create) release and packages
  release_packages:
    name: Release Packages
    needs:
      - required_scala_unit_tests
      - required_integration_tests
      - build_packages
    if: "github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')"
    runs-on: ubuntu-latest
    steps:
      - name: Load Packages
        uses: actions/download-artifact@v4
        with:
          name: artifacts-packages
          path: /tmp/artifacts
      - name: Update release and release artifacts
        uses: ncipollo/release-action@v1
        with:
          artifacts: /tmp/artifacts/*
          prerelease: true
          draft: true
          allowUpdates: true
          omitBodyDuringUpdate: true
          token: ${{ secrets.GITHUB_TOKEN }}
